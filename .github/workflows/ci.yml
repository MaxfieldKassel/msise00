name: ci

env:
  CMAKE_BUILD_PARALLEL_LEVEL: 3
  CMAKE_BUILD_TYPE: Release

on:
  release:
    types: [published]
  push:
    branches: [main]

jobs:
  build-wheels:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install system build tools
        if: runner.os != 'Windows'
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            sudo apt-get update
            sudo apt-get install -y cmake gfortran make
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            brew update
            brew install cmake gcc make
          fi
          
      - name: Install system build tools (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          choco install mingw cmake make --yes
          Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
          refreshenv
      - name: Build Fortran driver
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cmake -B build -G "MinGW Makefiles"
            cmake --build build
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            export MACOSX_DEPLOYMENT_TARGET=11.0
            export SDKROOT=$(xcrun --sdk macosx --show-sdk-path)

            echo "Building for arm64..."
            cmake -B build_arm64 -DCMAKE_OSX_ARCHITECTURES=arm64
            cmake --build build_arm64

            echo "Building for x86_64..."
            arch -x86_64 cmake -B build_x86_64 -DCMAKE_OSX_ARCHITECTURES=x86_64 -DCMAKE_Fortran_COMPILER=/usr/local/bin/gfortran
            arch -x86_64 cmake --build build_x86_64

            echo "Creating universal binary with lipo..."
            lipo -create \
              build_arm64/src/msise00/msise00_driver \
              build_x86_64/src/msise00/msise00_driver \
              -output src/msise00/msise00_driver
          else
            cmake -B build -DCMAKE_EXE_LINKER_FLAGS="-static-libgfortran -static-libgcc -static"
            cmake --build build
          fi

      - name: Set up Python 3.9 
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install packaging tools
        run: pip install --upgrade build

      - name: Build wheel
        run: python -m build --wheel

      - name: Delocate macOS wheel
        if: matrix.os == 'macos-latest'
        run: |
          arch -arm64 python3 -m pip install delocate
          arch -arm64 python3 -m delocate.cmd.delocate_wheel --require-archs arm64 -w dist_fixed dist/*.whl
          mv dist_fixed/*.whl dist/

      - name: List built artifacts
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            dir dist
          else
            ls -l dist
          fi

      - name: Upload wheel artifact
        uses: actions/upload-artifact@v4
        with:
          name: msise00-wheel-${{ matrix.os }}
          path: dist/*.whl


      - name: Upload to GitHub Release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*.whl